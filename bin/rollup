#!/usr/bin/env node

const { resolve, join } = require('path');
const { rollup } = require('rollup');
const buble = require('rollup-plugin-buble');
const replace = require('rollup-plugin-replace');
const uglify = require('rollup-plugin-uglify');
const filesize = require('rollup-plugin-filesize');
const alias = require('rollup-plugin-alias');
const chalk = require('chalk');
const boxen = require('boxen');
const optimizeJs = require('optimize-js');

const nodeResolve = require('rollup-plugin-node-resolve');
const commonjs = require('rollup-plugin-commonjs');

const PROJECT_FOLDER = resolve(__dirname, '..');
const rootPackageJson = require(join(PROJECT_FOLDER, 'package.json'));

const { NODE_ENV } = process.env;

const COPYRIGHT_YEAR = new Date().getFullYear();

const cwd = process.cwd();
const pkgJson = require(join(cwd, 'package.json'));

const {
	name,
	version,
	dependencies = {},
	'inferno:main': entryFile,
	rollup: rollupConfig = {}
} = pkgJson;

const copyright = `
/*!
 * ${rollupConfig.moduleName || name} v${version}
 * (c) ${COPYRIGHT_YEAR} ${rootPackageJson.author.name}'
 * Released under the ${rootPackageJson.license} License.
 */
`;

const entry = require.resolve(resolve(cwd, entryFile));
let filename = name;
if (NODE_ENV === 'production') {
	filename += '.min.js';
} else {
	filename += '.js';
}
const dest = join(cwd, 'dist', filename);
const bundleConfig = {
	dest,
	format: 'umd',
	exports: 'named',
	moduleName: rollupConfig.moduleName || name,
	globals: rollupConfig.moduleGlobals,
	banner: copyright,
	sourceMap: false
};

const optJs = {
	name: 'optimizeJs',

	transformBundle: function (code) {
		return optimizeJs(code);
	}
};
const external = Object.keys(dependencies).filter(n => !(rollupConfig.bundledDependencies || []).includes(n));

const plugins = [
	alias({
		'inferno-compat': resolve(__dirname, '../packages/inferno-compat/dist-es/index.js'),
		'inferno-component': resolve(__dirname, '../packages/inferno-component/dist-es/index.js'),
		'inferno-create-class': resolve(__dirname, '../packages/inferno-create-class/dist-es/index.js'),
		'inferno-create-element': resolve(__dirname, '../packages/inferno-create-element/dist-es/index.js'),
		'inferno-shared': resolve(__dirname, '../packages/inferno-shared/dist-es/index.js'),
		'inferno-hyperscript': resolve(__dirname, '../packages/inferno-hyperscript/dist-es/index.js'),
		'inferno-mobx': resolve(__dirname, '../packages/inferno-mobx/dist-es/index.js'),
		'inferno-redux': resolve(__dirname, '../packages/inferno-redux/dist-es/index.js'),
		'inferno-router': resolve(__dirname, '../packages/inferno-router/dist-es/index.js'),
		'inferno-server': resolve(__dirname, '../packages/inferno-server/dist-es/index.js'),
		inferno: resolve(__dirname, '../packages/inferno/dist-es/index.js')
	}),
	nodeResolve({
		jsnext: true
	}),
	commonjs({
		include: 'node_modules/**'
	}),
	buble()
];

if (NODE_ENV === 'production') {
	plugins.push(
		uglify({
			warnings: false,
			parse: {
				// parse options
				html5_comments: false,
				shebang: false
			},
			compress: {
				// compress options
				dead_code: true,
				drop_debugger: true,
				booleans: true,
				unused: true
			},
			sourceMap: false,
			toplevel: false,
			ie8: false
		})
	);
	plugins.push(
		replace({
			VERSION: rootPackageJson.version,
			'process.env.NODE_ENV': JSON.stringify('production')
		})
	);
	plugins.push(optJs);
} else {
	plugins.push(
		replace({
			VERSION: rootPackageJson.version,
			'process.env.NODE_ENV': JSON.stringify('development')
		})
	);
}
// Filesize plugin needs to be last to report correct filesizes when minified
plugins.push(filesize({
	render: function (options, size, gzip) {
		return boxen(chalk.green.bold(filename + ' size: ') + chalk.yellow.bold(size) + ', ' +
			chalk.green.bold('Gzipped size: ') + chalk.yellow.bold(gzip), { padding: 1 });
	}
}));

rollup({
	entry,
	plugins,
	external
})
.then(({ write }) => write(bundleConfig)).catch(console.error);

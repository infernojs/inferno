0 info it worked if it ends with ok
1 verbose cli [ '/home/sk/node/bin/node',
1 verbose cli   '/home/sk/node/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--tag',
1 verbose cli   'lerna-temp' ]
2 info using npm@4.1.2
3 info using node@v7.6.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/media/sk/ssd-data/GIT/inferno/packages/inferno',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/sk/.npm/inferno/1.3.1/package.tgz not in flight; packing
9 verbose correctMkdir /home/sk/.npm correctMkdir not in flight; initializing
10 info lifecycle inferno@1.3.1~prepublish: inferno@1.3.1
11 silly lifecycle inferno@1.3.1~prepublish: no script for prepublish, continuing
12 info lifecycle inferno@1.3.1~prepare: inferno@1.3.1
13 silly lifecycle inferno@1.3.1~prepare: no script for prepare, continuing
14 verbose tar pack [ '/home/sk/.npm/inferno/1.3.1/package.tgz',
14 verbose tar pack   '/media/sk/ssd-data/GIT/inferno/packages/inferno' ]
15 verbose tarball /home/sk/.npm/inferno/1.3.1/package.tgz
16 verbose folder /media/sk/ssd-data/GIT/inferno/packages/inferno
17 verbose addLocalTarball adding from inside cache /home/sk/.npm/inferno/1.3.1/package.tgz
18 verbose correctMkdir /home/sk/.npm correctMkdir not in flight; initializing
19 silly cache afterAdd inferno@1.3.1
20 verbose afterAdd /home/sk/.npm/inferno/1.3.1/package/package.json not in flight; writing
21 verbose correctMkdir /home/sk/.npm correctMkdir not in flight; initializing
22 verbose afterAdd /home/sk/.npm/inferno/1.3.1/package/package.json written
23 silly publish { name: 'inferno',
23 silly publish   version: '1.3.1',
23 silly publish   license: 'MIT',
23 silly publish   description: 'An extremely fast, React-like JavaScript library for building modern user interfaces',
23 silly publish   author: { name: 'Dominic Gannaway', email: 'dg@domgan.com' },
23 silly publish   bugs: { url: 'https://github.com/infernojs/inferno/issues' },
23 silly publish   homepage: 'https://github.com/infernojs/inferno#readme',
23 silly publish   keywords:
23 silly publish    [ 'babel',
23 silly publish      'react',
23 silly publish      'inferno',
23 silly publish      'framework',
23 silly publish      'interfaces',
23 silly publish      'user interfaces',
23 silly publish      'html',
23 silly publish      'renderToString',
23 silly publish      'server',
23 silly publish      'dom',
23 silly publish      'browser',
23 silly publish      'rollup' ],
23 silly publish   rollup: { moduleName: 'Inferno', moduleGlobal: 'Inferno' },
23 silly publish   main: 'dist/inferno.node.js',
23 silly publish   'inferno:main': 'dist-es/index.js',
23 silly publish   typings: 'dist-es/index.d.ts',
23 silly publish   repository:
23 silly publish    { type: 'git',
23 silly publish      url: 'git+https://github.com/infernojs/inferno.git' },
23 silly publish   dependencies: { 'inferno-shared': '^1.3.0', 'inferno-vnode-flags': '^1.3.0' },
23 silly publish   readme: '<p align="center"><img src="https://www.infernojs.org/assets/infernojs-logo.png"></p>\n<p>&nbsp;</p>\n\nInferno is an insanely fast, `9kb` React-like library for building high-performance user interfaces on both the client and server.\n\nTo quote a member of the React core team at Facebook:\n> Inferno 1.0 is really well written. It\'s how I would\'ve rewritten React. I\'d recommend reading its source to learn.\n\nInferno aims to provide all the great benefits that React does, plus other great features for people already familiar with the React ecosystem, such as: lifecycle events on functional components, server side render streams, better real-world performance, lower memory consumption and faster parse/load times. Furthermore, Inferno allows people to switch their **existing React projects** to Inferno in a few lines of code using [`inferno-compat`](https://github.com/infernojs/inferno/tree/master/packages/inferno-compat).\n\nFor those not familiar with React, Inferno is a JavaScript library for building user interfaces in a **declarative** manner. Rather than working with MVC/MVVM style patterns, Inferno uses a **component-based** approach where data flows in one direction, making coding predictable, re-usable and highly testable. Based on the concept of *learn once, write anywhere*, Inferno doesn\'t impose any restrictions on how you create components. You literally write JavaScript to state how you\'d like your UI to look – Inferno does all the rest. Inferno also renders content on the server via `inferno-server` and NodeJS, so you can write awesome UIs that get rendered full-stack.\n\nIn terms of performance, Inferno is currently the **fastest** JavaScript UI library there is – both in benchmarks and actual real-world scenarios. It excels on the browser at initial page load, parse times, render times and update times. Inferno\'s server-side rendering is around 5x faster than React, around 3x faster than Angular 2 and around 1.5x faster than Preact and Vue.\n\n## But why?\n\nInferno started as an idea two years ago, to see if a UI library could really improve the experience, battery, memory usage and performance on mobile devices. At the time we really struggled to get good performance on *any* UI library/framework – it simply wasn\'t happening, we spent a huge amount of time writing lots of vanilla JavaScript code and it did the job – but it was a mess.\n\nSince then, things haven\'t really improved much in the mobile space. Libraries have gotten smaller, but the time to parse a 2mb app can result in 5+ seconds time before the user can even see anything. Frameworks and libraries need to lose bloat, they need to care about performance. Developing on a MacBook Pro and seeing animations, routing, complex UIs instantly appear is *not* going to happen on an average mobile device (especially in emerging countries).\n\nInferno proves that it is possible to be fast on mobile. Parse-time, load-time, rendering complex UIs and all the normal things you\'d expect to just work. How Inferno does that is based on many factors, but ultimately Inferno\'s code is much better understood by modern JavaScript engines and can be highly optimised to perform far better than other libraries/frameworks.\n\n## Summary\n\n- Component driven + one-way data flow architecture\n- One of the fastest front-end frameworks for rendering UI in the DOM\n- React-like API, concepts and component lifecycle events\n- Partial synthetic event system, providing delegation to certain events for better performance\n- Inferno\'s [`linkEvent`](https://github.com/infernojs/inferno/blob/master/README.md#linkevent-package-inferno) feature removes the need to use arrow functions or binding event callbacks\n- Lightweight filesize of only 9kb\n- Isomorphic rendering on both client and server with `inferno-server`\n- Highly modular with very few opinions on how things should be done\n- Unlike React and Preact, Inferno has lifecycle events on functional components\n- Supports asynchronous component rendering using `requestIdleCallback`\n- Unlike Preact and other React-like libraries, Inferno has controlled components for input/select/textarea elements\n\n## Benchmarks\n\n- [Virtual DOM Benchmark](http://vdom-benchmark.github.io/vdom-benchmark/)\n- [UI Bench](https://localvoid.github.io/uibench/)\n- [dbmonster](https://rawgit.com/infernojs/dbmonster-inferno/master/index.html)\n- [JS Web Frameworks Benchmark - Round 4](http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html)\n\n## Code Example\n\nLet\'s start with some code. As you can see, Inferno intentionally keeps the same, good, design ideas as React regarding components: one-way data flow and separation of concerns.\n\nIn these examples, JSX is used via the [Inferno JSX Babel Plugin](https://github.com/infernojs/babel-plugin-inferno) to provide a simple way to express Inferno virtual DOM. You do not need to use JSX, it\'s completely **optional**, you can use [hyperscript](https://github.com/infernojs/inferno/tree/master/packages/inferno-hyperscript) or [createElement](https://github.com/infernojs/inferno/tree/master/packages/inferno-create-element) (like React does).\n\n```jsx\nimport Inferno from \'inferno\';\n\nconst message = "Hello world";\n\nInferno.render(\n  <MyComponent message={ message } />,\n  document.getElementById("app")\n);\n```\nFurthermore, Inferno also uses ES6 components like React:\n\n```jsx\nimport Inferno from \'inferno\';\nimport Component from \'inferno-component\';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>Header!</h1>\n        <span>Counter is at: { this.state.counter }</span>\n      </div>\n    )\n  }\n}\n\nInferno.render(\n  <MyComponent />,\n  document.getElementById("app")\n);\n```\n\n### More Examples\n\n- [**Simple Clock** (@JSFiddle)](https://jsfiddle.net/bqraqtmq/)\n\n## Getting Started\n\nThe best way to start to use Inferno is by using [Create Inferno App](https://github.com/infernojs/create-inferno-app). You can get setup and running within a few minutes.\n\nAlternatively, you can get started with Inferno using the [Inferno Boilerplate](https://github.com/infernojs/inferno-boilerplate) for a very simple setup. For a more advanced example demonstrating how Inferno might be used, we recommend trying out [Inferno Starter Project](https://github.com/nightwolfz/inferno-starter) by [nightwolfz](https://github.com/nightwolfz/). For using inferno to build a mobile app [Inferno Mobile Starter Project](https://github.com/Rudy-Zidan/inferno-mobile) by [Rudy-Zidan](https://github.com/Rudy-Zidan).\n\nCore package:\n\n```sh\nnpm install --save inferno\n```\n\nAddons:\n\n```sh\n# ES2015 class components\nnpm install --save inferno-component\n# server-side rendering\nnpm install --save inferno-server\n# routing\nnpm install --save inferno-router\n```\n\nPre-bundled files for browser consumption can be found on [our cdnjs](https://cdnjs.com/libraries/inferno):\n\n```\nhttps://cdnjs.cloudflare.com/ajax/libs/inferno/1.2.2/inferno.min.js\n```\n\nOr on unpkg.com:\n\n```\nhttps://unpkg.com/inferno@1.2.2/dist/inferno.min.js\n```\n\n### Creating Virtual DOM\n\n#### JSX:\n```sh\nnpm install --save-dev babel-plugin-inferno\n```\n\n#### Hyperscript:\n```sh\nnpm install --save inferno-hyperscript\n```\n\n#### createElement:\n```sh\nnpm install --save inferno-create-element\n```\n\n### Compatibility with existing React apps\n```sh\nnpm install --save-dev inferno-compat\n```\n\nNote: Make sure you read more about [`inferno-compat`](https://github.com/infernojs/inferno/tree/master/packages/inferno-compat) before using it.\n\n## Third-party state libraries\n\nInferno now has bindings available for some of the major state management libraries out there:\n\n- Redux via [`inferno-redux`](https://github.com/infernojs/inferno/tree/dev/packages/inferno-redux)\n- MobX via [`inferno-mobx`](https://github.com/infernojs/inferno/tree/dev/packages/inferno-mobx)\n- Cerebral via [`cerebral-view-inferno`](https://github.com/cerebral/cerebral-view-inferno)\n\n## JSX\n\nInferno has its own [JSX Babel plugin](https://github.com/trueadm/babel-plugin-inferno).\n\n## Differences from React\n\n- Inferno is much smaller in size, `9kb` vs `45kb` gzip. This means Inferno is faster to transfer over the network but more importantly, is *much* faster to parse – this makes a big impact on mobile.\n- Inferno is considerably faster than React. This doesn\'t apply to only benchmarks, but real-world applications that companies have converted to Inferno from React. Ranging from 40% - 110% performance improvement with Inferno `1.0`. No other React-like library gets close to this performance gain over React.\n- Inferno doesn\'t have a fully synthetic event system like React does. Inferno has a partially synthetic event system, instead opting to only delegate certain events (such as `onClick`).\n- Inferno doesn\'t support React Native. Inferno was only designed for the browser/server with the DOM in mind.\n- Inferno doesn\'t support string refs – although this can be enabled using `inferno-compat`. We don\'t recommend using them, they are the source of many memory leaks and performance issues in real-world apps. Stick with function callback refs instead.\n- Inferno includes `render` on the main core package, rather than have an `InfernoDOM` package like React does. We used to do it that way, but we found people simply didn\'t like it given we don\'t support native. Furthermore, by not splitting them, we improved performance and bundle sizes.\n- Inferno provides lifecycle events on functional components. This is a major win for people who prefer lightweight components rather than bloated ES2015 classes.\n- Inferno is able to use the React Dev Tools extensions for Chrome/Firefox/etc to provide the same level of debugging experience to user of Inferno via `inferno-devtools`.\n\n## Differences from Preact\n\n- Inferno is larger in size, `9kb` vs `3kb` gzip. This means that Preact should parse faster than Inferno – if only slightly.\n- Inferno has a partial synthetic event system, resulting in better performance via delegation of certain events.\n- Inferno is *much* faster than Preact in rendering, updating and removing elements from the DOM. Inferno diffs against virtual DOM, rather than the real DOM (except for when loading from server-side rendered content) which means it can make drastic improvements. Unfortunately, diffing against the real DOM has a 30-40% overhead cost in operations.\n- Inferno fully supports controlled components for `input`/`select`/`textarea` elements. This prevents lots of edgecases where the virtual DOM is not the source of truth (it should always be). Preact pushes the source of truth to the DOM itself.\n- Inferno provides lifecycle events on functional components. This is a major win for people who prefer lightweight components rather than bloated ES2015 classes.\n\n## Event System\n\nLike React, Inferno also uses a light-weight synthetic event system in certain places (although both event systems differ massively). Inferno\'s event system provides highly efficient delegation and an event helper called [`linkEvent`](https://github.com/infernojs/inferno/blob/master/README.md#linkevent-package-inferno).\n\nOne major difference between Inferno and React is that Inferno does not rename events or change how they work by default. Inferno only specifies that events should be camel cased, rather than lower case. Lower case events will bypass\nInferno\'s event system in favour of using the native event system supplied by the browser. For example, when detecting changes on an `<input>` element, in React you\'d use `onChange`, with Inferno you\'d use `onInput` instead (the\nnative DOM event is `oninput`).\n\nThis feature is a very recent addition to Inferno, so there are only a handful of events that use Inferno\'s event system:\n- `onClick`\n- `onDblClick`\n- `onMouseMove`\n- `onMouseDown`\n- `onMouseUp`\n- `onSubmit`\n- `onKeyPress`\n- `onKeyDown`\n- `onKeyUp`\n- `onInput`\n- `onChange`\n\nMore events are expected to be supported in future versions.\n\n## Controlled Components\n\nIn HTML, form elements such as `<input>`, `<textarea>`, and `<select>` typically maintain their own state and update it based on user input.\nIn Inferno, mutable state is typically kept in the state property of components, and only updated with `setState()`.\n\nWe can combine the two by making the Inferno state be the "single source of truth". Then the Inferno component that renders a form also\ncontrols what happens in that form on subsequent user input. An input form element whose value is controlled by\nInferno in this way is called a "controlled component".\n\n## Inferno Top-Level API\n\n### `render` (package: `inferno`)\n\n```javascript\nimport Inferno from \'inferno\';\n\nInferno.render(<div />, document.getElementById("app"));\n```\n\nRender a virtual node into the DOM in the supplied container given the supplied virtual DOM. If the virtual node was previously rendered\ninto the container, this will perform an update on it and only mutate the DOM as necessary, to reflect the latest Inferno virtual node.\n\nWarning: If the container element is not empty before rendering, the content of the container will be overwritten on the initial render.\n\n### `createRenderer` (package: `inferno`)\n\n`createRenderer` allows for functional composition when rendering content to the DOM. Example:\n\n```javascript\nimport Inferno from \'inferno\';\nimport { scan, map } from \'most\';\n\n...\nconst model$ = scan(update, 0, actions$);\nconst vNodes$ = map(view(actions$), model$);\nconst renderer = Inferno.createRenderer();\nconst runApp = () => scan(renderer, container, vNodes$).drain();\n\nrunApp();\n```\n\n### `createElement` (package: `inferno-create-element`)\n\nCreates an Inferno VNode using a similar API to that found with React\'s `createElement()`\n\n```javascript\nimport Component from \'inferno-component\';\nimport createElement from \'inferno-create-element\';\n\nclass BasicComponent extends Component {\n    render() {\n        return createElement(\'div\', {\n               className: \'basic\'\n           },\n           createElement(\'span\', {\n               className: this.props.name\n           }, \'The title is \', this.props.title)\n       )\n    }\n}\n\nInferno.render(\n  createElement(BasicComponent, { title: \'abc\' }),\n  document.getElementById("app")\n);\n```\n\n### `Component` (package: `inferno-component`)\n\n**Class component:**\n\n```javascript\nimport Component from \'inferno-component\';\n\nclass MyComponent extends Component {\n  render() {\n    ...\n  }\n}\n```\n\nThis is the base class for Inferno Components when they\'re defined using ES6 classes.\n\n**Functional component:**\n\n```javascript\nimport Inferno from \'inferno\';\n\nconst MyComponent = ({ name, age }) => (\n  <span>My name is: { name } and my age is: {age}</span>  \n);\n```\n\nFunctional components are first-class functions where their first argument is the `props` passed through from their parent.\n\n### `createVNode` (package: `inferno`)\n```js\nInferno.createVNode(\n  flags,\n  type,\n  [props],\n  [...children],\n  [events],\n  [key],\n  [ref],\n  [isNormalized]\n)\n```\n\nCreate a new Inferno `VNode` using `createVNode()`. A `VNode` is a virtual DOM object that is used to\ndescribe a single element of the UI. Typically `createElement()` (package: `inferno-create-element`), `h()` (package: `inferno-hyperscript`) or JSX are used to create\n`VNode`s for Inferno, but under the hood they all use `createVNode()`. Below is an example of using\nof `createVNode` usage:\n\n```javascript\nimport Inferno from \'inferno\';\n\nconst vNode = Inferno.createVNode(2, \'div\', { className: \'example\' }, \'Hello world!\');\n\nInferno.render(vNode, container);\n```\n\nThe first argument for `createVNode()` is a value from [`VNodeFlags`](https://github.com/infernojs/inferno/tree/master/packages/inferno-vnode-flags), this is a numerical value that tells Inferno what the VNode describes on the page.\n\n### `cloneVNode` (package: `inferno`)\n```js\nInferno.cloneVNode(\n  vNode,\n  [props],\n  [...children]\n)\n```\n\nClone and return a new Inferno `VNode` using a `VNode` as the starting point. The resulting `VNode` will have the original `VNode`\'s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original `VNode` will be preserved.\n\n`cloneVNode()` is almost equivalent to:\n```jsx\n<VNode.type {...VNode.props} {...props}>{children}</VNode.type>\n```\n\nAn example of using `cloneVNode`:\n\n```javascript\nimport Inferno from \'inferno\';\n\nconst vNode = Inferno.createVNode(2, \'div\', { className: \'example\' }, \'Hello world!\');\nconst newVNode = Inferno.cloneVNode(vNode, { id: \'new\' }); // we are adding an id prop to the VNode\n\nInferno.render(newVNode, container);\n```\n\nIf you\'re using JSX:\n\n```jsx\nimport Inferno from \'inferno\';\n\nconst vNode = <div className="example">Hello world</div>;\nconst newVNode = Inferno.cloneVNode(vNode, { id: \'new\' }); // we are adding an id prop to the VNode\n\nInferno.render(newVNode, container);\n```\n\n### `findDOMNode` (package: `inferno`)\n\nOnce enabled via `Inferno.options.findDOMNodeEnabled = true;` at the start of an application, `findDOMNode()` is enabled.\n\nNote: we recommend using a `ref` callback on a component to find its instance, rather than using `findDOMNode()`. `findDOMNode()` cannot be used on functional components and it introduces a significant performance impact.\n\nIf a component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements.\nIn most cases, you can attach a ref to the DOM node and avoid using `findDOMNode()` at all. When render returns null or false, `findDOMNode()` returns null.\n\n### `linkEvent` (package: `inferno`)\n\n`linkEvent()` is a helper function that allows attachment of `props`/`state`/`context` or other data to events without needing to `bind()` them or use arrow functions/closures. This is extremely useful when dealing with events in functional components. Below is an example:\n\n```jsx\nimport Inferno, { linkEvent } from \'inferno\';\n\nfunction handleClick(props, event) {\n\tprops.validateValue(event.target.value);\n}\n\nfunction MyComponent(props) {\n\treturn <div><input type="text" onClick={ linkEvent(props, handleClick) } /><div>;\n}\n```\n\nThis is an example of using it with ES2015 classes:\n\n\n```jsx\nimport Inferno, { linkEvent } from \'inferno\';\nimport Component from \'inferno-component\';\n\nfunction handleClick(instance, event) {\n\tinstance.setState({ data: event.target.value });\n}\n\nclass MyComponent extends Component {\n\trender () {\n\t\treturn <div><input type="text" onClick={ linkEvent(this, handleClick) } /><div>;\n\t}\n}\n```\n\n`linkEvent()` offers better performance than binding an event in a class constructor and using arrow functions, so use it where possible.\n\n### `renderToString` (package: `inferno-server`)\n\n```javascript\nimport Inferno from \'inferno\';\nimport InfernoServer from \'inferno-server\';\n\nInfernoServer.renderToString(<div />);\n```\n\nRender a virtual node into an HTML string, given the supplied virtual DOM.\n\n### `options` (package: `inferno`)\n\nYou can set default options for Inferno using `Inferno.options`. Below are the following options:\n\n#### - `findDOMNodeEnabled` (default: `false`)\n\nThis enables `findDOMNode()`. We strongly recommend against using this API as it introduces a significant impact to performance. In the future this API command will be removed, along with `findDOMNode()`;\n\n#### - `recyclingEnabled` (default: `true`)\n\nThis enables DOM node recycling within Inferno, so that DOM nodes are re-used upon disposal. It can have significant performance benefits, but may also cause side-effects with custom elements.\n\n## Functional component lifecycle events\n\n| Name                      | Triggered when                                                  | Arguments to callback           |\n| -----------               | --------------                                                  | -----------------------         |\n| `onComponentWillMount`    | a functional component is about to mount                        |                                 |\n| `onComponentDidMount`     | a functional component has mounted successfully                 | `domNode`                       |\n| `onComponentShouldUpdate` | a functional component has been triggered to updated            | `lastProps, nextProps`          |\n| `onComponentWillUpdate`   | a functional component is about to perform an update            | `lastProps, nextProps`          |\n| `onComponentDidUpdate`    | a functional component has performed an updated                 | `lastProps, nextProps`          |\n| `onComponentWillUnmount`  | a functional component is about to be unmounted                 | `domNode`                       |\n\n### Using functional lifecycle events\n\nFunctional lifecycle events must be explicitly assigned via props onto a functional component like shown below:\n\n```javascript\nfunction mounted(domNode) {\n    // [domNode] will be available for DOM nodes and components (if the component has mounted to the DOM)\n}\n\nfunction FunctionalComponent({ props }) {\n\treturn <div>Hello world</div>;\n}\n\nInferno.render(\n  <FunctionalComponent onComponentDidMount={ mounted } />,\n  document.getElementById("app")\n);\n```\n\nPlease note: class components (ES2015 classes) from `inferno-component` **do not** support the same lifecycle events (they have their own lifecycle events that work as methods on the class itself).\n\n## Development vs Production modes\n\nBy default, Inferno will run in development mode. Development mode provides extra checks and better error messages at the cost of slower performance and larger code to parse.\nWhen using Inferno in a production environment, it is highly recommended that you turn off development mode.\n\n### Running Inferno on Node JS\n\nEnsure the environment variable `process.env.NODE_ENV` is set to `production`.\n\n### Building Inferno for use in a browser\n\nWhen running Inferno on the browser using Webpack or Rollup, a replacement will need to occur during your build.\n\n#### Webpack\n\nUse the following configuration in your Webpack build:\n\n```js\n  ...\n\tplugins: [\n    new webpack.DefinePlugin({\n      \'process.env\': {\n        \'NODE_ENV\': JSON.stringify(\'production\')\n      }\n    })\n  ]\n```\n\n#### Rollup\n\nUse the following configuration in your Rollup build:\n\n```js\nconst replace = require(\'rollup-plugin-replace\');\n```\n\n```js\n  ...\n\tplugins: [\n\t\treplace({\n\t\t\t\'process.env.NODE_ENV\': JSON.stringify(\'production\'),\n\t\t})\n  ]\n```\n\n## Browser Support\n\nInferno supports Edge, Chrome, Firefox and Safari 8+. In order to support IE8-11, Inferno may require polyfills for the following JavaScript features:\n\n- [Promise object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [Map object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n- [WeakMap object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)\n- [Object.keys](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n\nPotential solutions include using the [es5-shim](https://github.com/es-shims/es5-shim) for ES5 features and [es6-shim](https://github.com/paulmillr/es6-shim) from ES2015 features.\n\nAs a quick drop-in solution, you may also use the [Polyfill.io](https://polyfill.io) service to pull in the required polyfills for the user\'s browser automatically by including the following line in your page:\n```\n<script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=Promise,Map,WeakMap,Object.keys,Object.assign"></script>\n```\n\n### Custom namespaces\n\nInferno wants to always deliver great performance. In order to do so, it has to make intelligent assumptions about the state of the DOM and the elements available to mutate. Custom namespaces conflict with this idea and change the schema of how different elements and attributes might work, so Inferno makes no attempt to support namespaces. Instead, SVG namespaces are automatically applied to elements and attributes based on their `tag name`.\n\n## Community\n\nThere is an [Inferno Slack](https://infernojs.slack.com). You can join via [inferno-slack.herokuapp.com](https://inferno-slack.herokuapp.com).\n',
23 silly publish   readmeFilename: 'README.md',
23 silly publish   bundleDependencies: [ 'inferno-shared', 'inferno-vnode-flags' ],
23 silly publish   _id: 'inferno@1.3.1',
23 silly publish   scripts: {},
23 silly publish   _shasum: '5e8229a821aa417bfb97aeb70f67d1615141af36',
23 silly publish   _from: '.' }
24 info lifecycle inferno@1.3.1~prepublishOnly: inferno@1.3.1
25 silly lifecycle inferno@1.3.1~prepublishOnly: no script for prepublishOnly, continuing
26 verbose getPublishConfig undefined
27 silly mapToRegistry name inferno
28 silly mapToRegistry using default registry
29 silly mapToRegistry registry http://registry.npmjs.org/
30 silly mapToRegistry data Result {
30 silly mapToRegistry   raw: 'inferno',
30 silly mapToRegistry   scope: null,
30 silly mapToRegistry   escapedName: 'inferno',
30 silly mapToRegistry   name: 'inferno',
30 silly mapToRegistry   rawSpec: '',
30 silly mapToRegistry   spec: 'latest',
30 silly mapToRegistry   type: 'tag' }
31 silly mapToRegistry uri http://registry.npmjs.org/inferno
32 verbose publish registryBase http://registry.npmjs.org/
33 silly publish uploading /home/sk/.npm/inferno/1.3.1/package.tgz
34 verbose request uri http://registry.npmjs.org/inferno
35 verbose request sending authorization for write operation
36 info attempt registry request try #1 at 7:53:55 PM
37 verbose request using bearer token for auth
38 verbose request id 0f672e8a55389f8e
39 http request PUT http://registry.npmjs.org/inferno
40 http 200 http://registry.npmjs.org/inferno
41 verbose headers { 'content-type': 'application/json',
41 verbose headers   'content-encoding': 'gzip',
41 verbose headers   'cache-control': 'max-age=300',
41 verbose headers   'transfer-encoding': 'chunked',
41 verbose headers   'accept-ranges': 'bytes',
41 verbose headers   date: 'Thu, 09 Mar 2017 17:53:58 GMT',
41 verbose headers   via: '1.1 varnish',
41 verbose headers   connection: 'keep-alive',
41 verbose headers   'x-served-by': 'cache-bma7034-BMA',
41 verbose headers   'x-cache': 'MISS',
41 verbose headers   'x-cache-hits': '0',
41 verbose headers   'x-timer': 'S1489082035.322320,VS0,VE3477',
41 verbose headers   vary: 'Accept-Encoding' }
42 verbose request invalidating /home/sk/.npm/registry.npmjs.org/inferno on PUT
43 info lifecycle inferno@1.3.1~publish: inferno@1.3.1
44 verbose stack Error: write EPIPE
44 verbose stack     at exports._errnoException (util.js:1028:11)
44 verbose stack     at WriteWrap.afterWrite [as oncomplete] (net.js:804:14)
45 verbose cwd /media/sk/ssd-data/GIT/inferno/packages/inferno
46 error Linux 4.4.0-66-generic
47 error argv "/home/sk/node/bin/node" "/home/sk/node/bin/npm" "publish" "--tag" "lerna-temp"
48 error node v7.6.0
49 error npm  v4.1.2
50 error code EPIPE
51 error errno EPIPE
52 error syscall write
53 error write EPIPE
54 error If you need help, you may report this error at:
54 error     <https://github.com/npm/npm/issues>
55 verbose exit [ 1, true ]
